{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","querySelector"],"mappings":"oMAIaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBa,SAACP,GACtBF,EAAeE,EAAEQ,OAAOF,a,sCCTnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAUH,GAFvF,sBAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAMQ,EAAIG,OAAOC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAClC,OACI,sBAAKc,UAAY,6CAAjB,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,4BAAKA,QCDJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAItB,ECNwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WACPxB,EAASC,GAAWwB,MAAM,SAAAC,GAEtBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKlB,CAACpB,IAIGqB,EDf0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAUrB,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SAAwDhB,IAEvDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAY,YAAjB,SAGQH,EAAOJ,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAAkCA,GAAbA,EAAIC,aEAzCgB,EAxBM,WAEjB,MAAsCzC,mBAAS,CAAC,cAAhD,mBAAQ0C,EAAR,KAAoB3C,EAApB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBACA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAA4BA,SAAaA,GAAxBA,Y,MCfhD6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.02cba022.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(''); //para evitar el undefined y el consiguiente error\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length >= 2 ){\r\n            setCategories( cats => [ inputValue, ...cats ] ); // ...cats, inputValue --> pone las nuevas a lo ultimo\r\n            setInputValue('');\r\n        } \r\n        \r\n    }\r\n    \r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type='text'\r\n                value={ inputValue }\r\n                onChange = { handleInputValue }\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired \r\n}\r\n","export const getGifs = async( category ) => {\r\n    // PETICIÓN HTTP\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=nESodg2lw17iz0aOD7kDoX79ktUGXWcP&q=${ encodeURI(category)}&limit=10`   \r\n    // encodeURI HACE QUE SE ELIMINEN ESPACIOS QUE PUEDA TENER     \r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json(); //la data son las imagenes \r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url : img.images.downsized_medium.url,\r\n        }\r\n    })\r\n    // PETICION HTTP\r\n    return gifs; //devuelve una promesa que resuelve la coleccion de imagenes\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    return (\r\n        <div className = \"card animate__animated animate__fadeInDown\">\r\n            <img src = { url } alt = { title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    //es decir, data:images quiere decir RENOMBRA data COMO images\r\n    \r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category ).then( imgs => setImages(imgs));\r\n    // }, [ category ]) \r\n    // [] es un arreglo de dependencias el hecho de que este vacío quiere decir que está en el cuerpo de la función se ejecutará una vez\r\n    // Pero como se le pasa el category que GifGrid tiene como arguemento, quiere decir que si la categoria CAMBIARA ejecuataría de nuevo el useEffect\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInDown\">{ category }</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n            \r\n            <div className = \"card-grid\">\r\n            \r\n                {\r\n                    images.map( img => { //desestructuro para no hacer img.id y img.title\r\n                        return <GifGridItem key = { img.id } {...img} />\r\n                    })\r\n                }\r\n                \r\n            </div>\r\n\r\n            {/* <div className = \"card-grid\">\r\n            \r\n                {\r\n                    images.map( img => { //desestructuro para no hacer img.id y img.title\r\n                        return <GifGridItem key = { img.id } {...img} />\r\n                    })\r\n                }\r\n                \r\n            </div> */}\r\n        </>\r\n    )\r\n}\r\n","import { useState } from 'react';\r\nimport { useEffect } from 'react/cjs/react.development';\r\nimport {getGifs} from '../helpers/getGifs';\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category ).then( imgs => {\r\n\r\n            setState({\r\n                data: imgs, // las imagenes las regreso como un objeto llamado data\r\n                loading: false //pues ya termine de cargar\r\n            });\r\n\r\n            \r\n        })\r\n    }, [category])\r\n\r\n\r\n    //el uso de useState indica a otros comoponentes cuando deben renderizarse nuevamente debido a un cambio\r\n    return state;\r\n}","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [ categories, setCategories ] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories( [...categories, \"hola mundo\"] );\r\n    // }\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr/> \r\n            <ol>\r\n                {\r\n                    categories.map( category => {\r\n                        return <GifGrid key = { category } category = { category } />\r\n                    })\r\n                }\r\n            </ol>    \r\n        </>\r\n    );\r\n};\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render( \n  <GifExpertApp />,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}